{"version":3,"file":"map-gl-indoor.umd.js","sources":["../src/IndoorControl.ts","../src/Utils.ts","../src/Indoor.ts","../src/style/DefaultLayers.ts","../src/style/index.ts","../node_modules/@turf/helpers/index.js","../node_modules/@turf/meta/index.js","../node_modules/@turf/bbox/index.js","../src/GeojsonHelper.ts","../src/IndoorMap.ts","../src/MapServerHandler.ts","../src/index.ts"],"sourcesContent":["import Indoor from './Indoor';\nimport IndoorMap from './IndoorMap';\n\nimport type { Map } from 'mapbox-gl';\nimport type { Level } from './types';\n\n/**\n * Creates a indoor control with floors buttons\n\n * @implements {IControl}\n */\nclass IndoorControl {\n\n    _indoor: Indoor;\n    _map: Map;\n    _indoorMap: IndoorMap | null;\n\n    _container: HTMLElement | null;\n    _levelsButtons: Array<HTMLElement>;\n    _selectedButton: HTMLElement | null;\n\n    constructor(indoor: Indoor) {\n        this._indoor = indoor;\n        this._levelsButtons = [];\n        this._container = null;\n        this._selectedButton = null;\n    }\n\n    onAdd(map: Map) {\n        this._map = map;\n\n        // Create container\n        this._container = document.createElement(\"div\");\n        this._container.classList.add(\"mapboxgl-ctrl\");\n        this._container.classList.add(\"mapboxgl-ctrl-group\");\n        this._container.style.display = 'none';\n        this._container.addEventListener('contextmenu', this._onContextMenu);\n\n        // If indoor layer is already loaded, update levels\n        this._indoorMap = this._indoor.getSelectedMap();\n        if (this._indoor.getSelectedMap() !== null) {\n            this._updateNavigationBar()\n            this._setSelected(this._indoor.getLevel());\n        }\n\n        // Register to indoor events\n        this._map.on('indoor.map.loaded', this._onMapLoaded);\n        this._map.on('indoor.map.unloaded', this._onMapUnLoaded);\n        this._map.on('indoor.level.changed', this._onLevelChanged);\n\n        return this._container;\n    }\n\n    onRemove() {\n        this._container.remove();\n        this._container = null;\n        this._map.off('indoor.map.loaded', this._onMapLoaded);\n        this._map.off('indoor.map.unloaded', this._onMapUnLoaded);\n        this._map.off('indoor.level.changed', this._onLevelChanged);\n    }\n\n    _onMapLoaded = ({ indoorMap }: { indoorMap: IndoorMap }): void => {\n        this._indoorMap = indoorMap;\n        this._updateNavigationBar();\n        this._setSelected(this._indoor.getLevel());\n    }\n\n    _onMapUnLoaded = (): void => {\n        this._indoorMap = null;\n        this._updateNavigationBar();\n    }\n\n    _onLevelChanged = ({ level }: { level: Level | null }): void => this._setSelected(level);\n\n    _updateNavigationBar() {\n\n        if (this._container === null) {\n            return;\n        }\n\n        if (this._indoorMap === null) {\n            this._container.style.display = 'none';\n            return;\n        }\n\n        this._container.style.display = 'block';\n\n        this._levelsButtons = [];\n        while (this._container.firstChild) {\n            this._container.removeChild(this._container.firstChild);\n        }\n\n        const range = this._indoorMap.levelsRange;\n        for (let i = range.max; i >= range.min; i--) {\n            this._levelsButtons[i] = this._createLevelButton(this._container, i);\n        }\n    }\n\n    _setSelected(level: Level | null) {\n\n        if (this._levelsButtons.length === 0) {\n            return;\n        }\n\n        if (this._selectedButton) {\n            this._selectedButton.style.fontWeight = \"normal\";\n        }\n        if (level !== null && this._levelsButtons[level]) {\n            this._levelsButtons[level].style.fontWeight = \"bold\";\n            this._selectedButton = this._levelsButtons[level];\n        }\n    }\n\n    _createLevelButton(container: HTMLElement, level: Level) {\n        const a = document.createElement(\"button\");\n        a.innerHTML = level.toString();\n        a.classList.add(\"mapboxgl-ctrl-icon\");\n        container.appendChild(a);\n        a.addEventListener('click', () => {\n            this._map.fire('indoor.control.clicked', { level });\n            if (this._indoor.getLevel() === level) return;\n            this._indoor.setLevel(level);\n        });\n        return a;\n    }\n\n    _onContextMenu(e: Event) {\n        e.preventDefault();\n    }\n\n}\n\nexport default IndoorControl;\n","import { LngLat, LngLatBounds } from 'mapbox-gl';\n\nimport type { FilterSpecification, Level } from './types';\n\nexport const EarthRadius = 6371008.8;\n\nexport function overlap(bounds1: LngLatBounds, bounds2: LngLatBounds) {\n\n    // If one rectangle is on left side of other\n    if (bounds1.getWest() > bounds2.getEast() || bounds2.getWest() > bounds1.getEast()) {\n        return false;\n    }\n\n    // If one rectangle is above other\n    if (bounds1.getNorth() < bounds2.getSouth() || bounds2.getNorth() < bounds1.getSouth()) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function filterWithLevel(initialFilter: FilterSpecification, level: Level, showFeaturesWithEmptyLevel: boolean = false): any {\n    return [\n        \"all\",\n        initialFilter,\n        [\n            'any',\n            showFeaturesWithEmptyLevel ? [\"!\", [\"has\", \"level\"]] : false,\n            [\n                'all',\n                [\n                    \"has\",\n                    \"level\"\n                ],\n                [\n                    \"any\",\n                    [\n                        \"==\",\n                        [\"get\", \"level\"],\n                        level.toString()\n                    ],\n                    [\n                        \"all\",\n                        [\n                            \"!=\",\n                            [\n                                \"index-of\",\n                                \";\",\n                                [\"get\", \"level\"]\n                            ],\n                            -1,\n                        ],\n                        [\n                            \">=\",\n                            level,\n                            [\n                                \"to-number\",\n                                [\n                                    \"slice\",\n                                    [\"get\", \"level\"],\n                                    0,\n                                    [\n                                        \"index-of\",\n                                        \";\",\n                                        [\"get\", \"level\"]\n                                    ]\n                                ]\n                            ]\n                        ],\n                        [\n                            \"<=\",\n                            level,\n                            [\n                                \"to-number\",\n                                [\n                                    \"slice\",\n                                    [\"get\", \"level\"],\n                                    [\n                                        \"+\",\n                                        [\n                                            \"index-of\",\n                                            \";\",\n                                            [\"get\", \"level\"]\n                                        ],\n                                        1\n                                    ]\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ];\n}\n\n\nexport function destinationPoint(start: LngLat, distance: number, bearing: number) : LngLat {\n    const dR = distance / EarthRadius;\n    const cosDr = Math.cos(dR);\n    const sinDr = Math.sin(dR);\n\n    const phi1 = start.lat / 180 * Math.PI;\n    const lambda1 = start.lng / 180 * Math.PI;\n\n    const phi2 = Math.asin( Math.sin(phi1) * cosDr\n        + Math.cos(phi1) * sinDr * Math.cos(bearing)\n    );\n    const lambda2 = lambda1 + Math.atan2(\n        Math.sin(bearing) * sinDr * Math.cos(phi1),\n        cosDr - Math.sin(phi1) * Math.sin(phi2)\n    );\n\n    return new LngLat(lambda2 * 180 / Math.PI, phi2 * 180 / Math.PI);\n}\n\nexport function distance(point1: LngLat, point2: LngLat) : number {\n\n    const lat1 = point1.lat / 180 * Math.PI;\n    const lng1 = point1.lng / 180 * Math.PI;\n\n    const lat2 = point2.lat / 180 * Math.PI;\n    const lng2 = point2.lng / 180 * Math.PI;\n\n    const dlat = lat2 - lat1;\n    const dlng = lng2 - lng1;\n\n    const angle = Math.sin(dlat / 2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlng / 2) ** 2;\n\n    const tangy = Math.sqrt(angle);\n    const tangx = Math.sqrt(1 - angle);\n    const cosn = 2 * Math.atan2(tangy, tangx);\n\n    return EarthRadius * cosn;\n}\n","import IndoorMap from './IndoorMap';\nimport IndoorControl from './IndoorControl';\nimport { overlap, filterWithLevel, distance } from './Utils';\n\ntype SavedFilter = {\n    layerId: string,\n    filter: FilterSpecification\n}\n\nimport type { Map } from 'mapbox-gl';\nimport type { Level, FilterSpecification, LayerSpecification } from './types';\n\nconst SOURCE_ID = 'indoor';\n\n/**\n * Manage indoor levels\n * @param {Map} map the Mapbox map\n */\nclass Indoor {\n\n    _map: Map;\n    _level: Level | null;\n\n    _indoorMaps: Array<IndoorMap>;\n    _selectedMap: IndoorMap | null;\n    _previousSelectedMap: IndoorMap | null;\n    _previousSelectedLevel: Level | null;\n\n    _savedFilters: Array<SavedFilter>;\n    _mapLoaded: boolean;\n\n    _control: IndoorControl;\n\n    _updateMapPromise: Promise<void>;\n\n    constructor(map: Map) {\n        this._map = map;\n        this._level = null;\n\n        this._indoorMaps = [];\n        this._savedFilters = [];\n        this._selectedMap = null;\n        this._previousSelectedMap = null;\n        this._previousSelectedLevel = null;\n        this._mapLoaded = false;\n        this._updateMapPromise = Promise.resolve();\n\n        this._control = new IndoorControl(this);\n\n        if (this._map.loaded()) {\n            this._mapLoaded = true;\n        } else {\n            this._map.on('load', () => {\n                this._mapLoaded = true;\n                this._updateSelectedMapIfNeeded();\n            });\n        }\n\n        this._map.on('moveend', () => this._updateSelectedMapIfNeeded());\n    }\n\n    getSelectedMap(): IndoorMap | null {\n        return this._selectedMap;\n    }\n\n    getLevel(): Level | null {\n        return this._level;\n    }\n\n    setLevel(level: Level | null, fireEvent: Boolean = true): void {\n\n        if (this._selectedMap === null) {\n            throw new Error('Cannot set level, no map has been selected');\n        }\n\n        this._level = level;\n        this._updateFiltering();\n        if (fireEvent) {\n            this._map.fire('indoor.level.changed', { level });\n        }\n    }\n\n    get control(): IndoorControl {\n        return this._control;\n    }\n\n    /**\n     * ***********************\n     * Handle level change\n     * ***********************\n     */\n\n    _addLayerForFiltering(layer: LayerSpecification, beforeLayerId?: string) {\n        this._map.addLayer(layer, beforeLayerId);\n        this._savedFilters.push({\n            layerId: layer.id,\n            filter: this._map.getFilter(layer.id) || [\"all\"]\n        });\n    }\n\n    _removeLayerForFiltering(layerId: string) {\n        this._savedFilters = this._savedFilters.filter(({ layerId: id }) => layerId !== id);\n        this._map.removeLayer(layerId);\n    }\n\n    _updateFiltering() {\n        const level = this._level;\n\n        let filterFn: (filter: FilterSpecification) => FilterSpecification;\n        if (level !== null) {\n            const showFeaturesWithEmptyLevel = this._selectedMap ? this._selectedMap.showFeaturesWithEmptyLevel : false;\n            filterFn = (filter: FilterSpecification) => filterWithLevel(filter, level, showFeaturesWithEmptyLevel);\n        } else {\n            filterFn = (filter: FilterSpecification): FilterSpecification => filter;\n        }\n\n        this._savedFilters.forEach(({ layerId, filter }) => this._map.setFilter(layerId, filterFn(filter)));\n    }\n\n\n\n    /**\n     * **************\n     * Handle maps\n     * **************\n     */\n\n    addMap(map: IndoorMap) {\n        this._indoorMaps.push(map);\n        this._updateSelectedMapIfNeeded();\n    }\n\n    removeMap(map: IndoorMap) {\n        this._indoorMaps = this._indoorMaps.filter(_indoorMap => _indoorMap !== map);\n        this._updateSelectedMapIfNeeded();\n    }\n\n\n    async _updateSelectedMapIfNeeded() {\n\n        if (!this._mapLoaded) {\n            return;\n        }\n\n        // Avoid to call \"closestMap\" or \"updateSelectedMap\" if the previous call is not finished yet\n        await this._updateMapPromise;\n        this._updateMapPromise = (async () => {\n            const closestMap = this._closestMap();\n            if (closestMap !== this._selectedMap) {\n                this._updateSelectedMap(closestMap);\n            }\n        })();\n    }\n\n    _updateSelectedMap(indoorMap: IndoorMap | null) {\n\n        const previousMap = this._selectedMap;\n\n        // Remove the previous selected map if it exists\n        if (previousMap !== null) {\n            previousMap.layersToHide.forEach(layerId => this._map.setLayoutProperty(layerId, 'visibility', 'visible'));\n            previousMap.layers.forEach(({ id }) => this._removeLayerForFiltering(id));\n            this._map.removeSource(SOURCE_ID);\n\n            if (!indoorMap) {\n                // Save the previous map level.\n                // It enables the user to exit and re-enter, keeping the same level shown.\n                this._previousSelectedLevel = this._level;\n                this._previousSelectedMap = previousMap;\n            }\n\n            this.setLevel(null, false);\n            this._map.fire('indoor.map.unloaded', { indoorMap: previousMap });\n        }\n\n        this._selectedMap = indoorMap;\n        if (!indoorMap) {\n            return;\n        }\n\n        const { geojson, layers, levelsRange, beforeLayerId } = indoorMap;\n\n        // Add map source\n        this._map.addSource(SOURCE_ID, {\n            type: \"geojson\",\n            data: geojson\n        });\n\n        // Add layers and save filters\n        layers.forEach(layer => this._addLayerForFiltering(layer, beforeLayerId));\n\n        // Hide layers which can overlap for rendering\n        indoorMap.layersToHide.forEach(layerId => this._map.setLayoutProperty(layerId, 'visibility', 'none'));\n\n        // Restore the same level when the previous selected map is the same.\n        const level = this._previousSelectedMap === indoorMap\n            ? this._previousSelectedLevel\n            : Math.max(Math.min(indoorMap.defaultLevel, levelsRange.max), levelsRange.min)\n\n        this.setLevel(level, false);\n\n        this._map.fire('indoor.map.loaded', { indoorMap });\n    }\n\n    _closestMap() {\n\n        // TODO enhance this condition\n        if (this._map.getZoom() < 17) {\n            return null;\n        }\n\n        const cameraBounds = this._map.getBounds();\n        const mapsInBounds = this._indoorMaps.filter(indoorMap =>\n            overlap(indoorMap.bounds, cameraBounds)\n        );\n\n        if (mapsInBounds.length === 0) {\n            return null;\n        }\n\n        if (mapsInBounds.length === 1) {\n            return mapsInBounds[0];\n        }\n\n        /*\n         * If there is multiple maps at this step, select the closest\n         */\n        let minDist = Number.POSITIVE_INFINITY;\n        let closestMap = mapsInBounds[0];\n        for (const map of mapsInBounds) {\n            const _dist = distance(map.bounds.getCenter(), cameraBounds.getCenter());\n            if (_dist < minDist) {\n                closestMap = map;\n                minDist = _dist;\n            }\n        }\n        return closestMap;\n    }\n\n}\n\nexport default Indoor;\n\n","import defaultLayers from './default_layers.json';\n\nimport type { LayerSpecification } from '../types';\n\nlet layers: Array<LayerSpecification> = defaultLayers;\n\n/**\n * Transform the generic \"poi-indoor\" layer into multiple layers using filters based on OSM tags\n */\n\nconst POI_LAYER_ID = \"poi-indoor\";\n\nconst OSM_FILTER_MAPBOX_MAKI_LIST = [\n    {\n        filter: ['filter-==', 'amenity', 'fast_food'],\n        maki: 'fast-food'\n    },\n    {\n        filter: ['filter-==', 'amenity', 'restaurant'],\n        maki: 'restaurant'\n    },\n    {\n        filter: ['filter-==', 'amenity', 'cafe'],\n        maki: 'cafe'\n    },\n    {\n        filter: ['filter-==', 'amenity', 'bank'],\n        maki: 'bank'\n    },\n    {\n        filter: ['filter-==', 'amenity', 'toilets'],\n        maki: 'toilet'\n    },\n    {\n        filter: ['filter-==', 'shop', 'travel_agency'],\n        maki: 'suitcase'\n    },\n    {\n        filter: ['filter-==', 'shop', 'convenience'],\n        maki: 'grocery'\n    },\n    {\n        filter: ['filter-==', 'shop', 'bakery'],\n        maki: 'bakery'\n    },\n    {\n        filter: ['filter-==', 'shop', 'chemist'],\n        maki: 'pharmacy'\n    },\n    {\n        filter: ['filter-==', 'shop', 'clothes'],\n        maki: 'clothing-store'\n    },\n    {\n        filter: ['filter-==', 'highway', 'steps'],\n        maki: 'entrance'\n    },\n    {\n        filter: ['has', 'shop'],\n        maki: 'shop'\n    }\n];\n\nfunction createPoiLayers(metaLayer: LayerSpecification): Array<LayerSpecification> {\n    return OSM_FILTER_MAPBOX_MAKI_LIST.map(poi => {\n        const newLayer = Object.assign({}, metaLayer);\n        newLayer.id += `-${poi.maki}`;\n        newLayer.filter = poi.filter;\n        newLayer.layout = Object.assign({}, metaLayer.layout);\n        newLayer.layout['icon-image'] = `${poi.maki}-15`;\n        return newLayer;\n    });\n}\n\nconst poiLayer = layers.find(layer => layer.id === POI_LAYER_ID);\nif (poiLayer) {\n    // Convert poi-indoor layer into several poi-layers\n    createPoiLayers(poiLayer).forEach(_layer => layers.push(_layer));\n    layers = layers.filter(layer => layer.id !== POI_LAYER_ID);\n}\n\nexport default layers;\n","import DefaultLayers from './DefaultLayers';\n\nexport default { DefaultLayers };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nexports.default = bbox;\n","import { LngLatBounds } from 'mapbox-gl';\nimport bbox from '@turf/bbox';\n\nimport type { Feature, GeoJSON } from 'geojson';\nimport type { LevelsRange } from './types';\n\n/**\n * Helper for Geojson data\n */\nclass GeoJsonHelper {\n\n    /**\n     * Extract level from feature\n     *\n     * @param {GeoJSONFeature} feature geojson feature\n     * @returns {LevelsRange | number | null} the level or the range of level.\n     */\n    static extractLevelFromFeature(feature: Feature): (LevelsRange | number | null) {\n        if (!!feature.properties &&\n            feature.properties.level !== null) {\n            const propertyLevel = feature.properties['level'];\n            if (typeof propertyLevel === 'string') {\n                const splitLevel = propertyLevel.split(';');\n                if (splitLevel.length === 1) {\n                    const level = parseFloat(propertyLevel);\n                    if (!isNaN(level)) {\n                        return level;\n                    }\n                } else if (splitLevel.length === 2) {\n                    const level1 = parseFloat(splitLevel[0]);\n                    const level2 = parseFloat(splitLevel[1]);\n                    if (!isNaN(level1) && !isNaN(level2)) {\n                        return {\n                            min: Math.min(level1, level2),\n                            max: Math.max(level1, level2)\n                        };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Extract levels range and bounds from geojson\n     *\n     * @param {GeoJSON} geojson the geojson\n     * @returns {Object} the levels range and bounds.\n     */\n    static extractLevelsRangeAndBounds(geojson: GeoJSON): ({ levelsRange: LevelsRange, bounds: LngLatBounds }) {\n\n        let minLevel = Infinity;\n        let maxLevel = -Infinity;\n\n        const boundsFromTurf = <[number, number, number, number]>bbox(geojson).slice(0, 4);\n        const bounds = new LngLatBounds(boundsFromTurf);\n\n        const parseFeature = (feature: Feature): void => {\n            const level = this.extractLevelFromFeature(feature);\n            if (level === null) {\n                return;\n            }\n            if (typeof level === 'number') {\n                minLevel = Math.min(minLevel, level);\n                maxLevel = Math.max(maxLevel, level);\n            } else if (typeof level === 'object') {\n                minLevel = Math.min(minLevel, level.min);\n                maxLevel = Math.max(maxLevel, level.max);\n            }\n        };\n\n        if (geojson.type === 'FeatureCollection') {\n            geojson.features.forEach(parseFeature);\n        } else if (geojson.type === 'Feature') {\n            parseFeature(geojson);\n        }\n\n        if (minLevel === Infinity || maxLevel === -Infinity) {\n            throw new Error('No level found');\n        }\n        return {\n            levelsRange: { min: minLevel, max: maxLevel },\n            bounds\n        };\n    }\n}\nexport default GeoJsonHelper;\n","import Style from './style';\nimport GeoJsonHelper from './GeojsonHelper';\n\nimport type { GeoJSON } from 'geojson';\n\nimport type { LevelsRange, IndoorMapOptions, LayerSpecification } from './types';\nimport type { LngLatBounds } from 'mapbox-gl';\n\nclass IndoorMap {\n\n    bounds: LngLatBounds;\n    geojson: any;\n    layers: Array<LayerSpecification>;\n    levelsRange: LevelsRange;\n    beforeLayerId?: string;\n    layersToHide: Array<string>;\n    defaultLevel: number;\n    showFeaturesWithEmptyLevel: boolean;\n\n    static fromGeojson(geojson: GeoJSON, options: IndoorMapOptions = {}) {\n\n        const { bounds, levelsRange } = GeoJsonHelper.extractLevelsRangeAndBounds(geojson);\n\n        const map = new IndoorMap();\n        map.geojson = geojson;\n        map.layers = options.layers ? options.layers : Style.DefaultLayers;\n        map.bounds = bounds;\n        map.levelsRange = levelsRange;\n        map.layersToHide = options.layersToHide ? options.layersToHide : [];\n        map.beforeLayerId = options.beforeLayerId;\n        map.defaultLevel = options.defaultLevel ? options.defaultLevel : 0;\n        map.showFeaturesWithEmptyLevel = options.showFeaturesWithEmptyLevel ? options.showFeaturesWithEmptyLevel : false;\n\n        return map;\n    }\n\n}\n\nexport default IndoorMap;\n","import { LngLatBounds } from 'mapbox-gl';\n\nimport IndoorMap from './IndoorMap';\nimport { destinationPoint, distance } from './Utils';\n\nimport type { Map as MapboxMap } from 'mapbox-gl';\nimport type Indoor from './Indoor';\nimport type { IndoorMapOptions } from './types';\n\ntype Map = MapboxMap & {\n    indoor?: Indoor\n};\n\ntype RemoteMap = {\n    name: string,\n    path: string,\n    indoorMap?: IndoorMap\n}\n\nconst MIN_ZOOM_TO_DOWNLOAD = 17;\nconst AREA_TO_DOWNLOAD = 1000; // in terms of distance from user\n\nclass MapServerHandler {\n\n    serverUrl: string;\n\n    map: Map;\n    remoteMapsDownloaded: RemoteMap[];\n    downloadedBounds: LngLatBounds | null;\n\n    loadMapsPromise: Promise<void> = Promise.resolve();\n\n    indoorMapOptions: IndoorMapOptions;\n\n    private constructor(serverUrl: string, map: Map, indoorMapOptions? : IndoorMapOptions) {\n        this.serverUrl = serverUrl;\n        this.map = map;\n        this.indoorMapOptions = indoorMapOptions;\n        this.remoteMapsDownloaded = [];\n        this.downloadedBounds = null;\n\n        if (map.loaded) {\n            this.loadMapsIfNecessary();\n        } else {\n            map.on('load', () => this.loadMapsIfNecessary())\n        }\n        map.on('move', () => this.loadMapsIfNecessary());\n    }\n\n    private loadMapsIfNecessary = async () => {\n\n        if (this.map.getZoom() < MIN_ZOOM_TO_DOWNLOAD) {\n            return;\n        }\n\n        const viewPort = this.map.getBounds();\n        if (this.downloadedBounds !== null) {\n            if (this.downloadedBounds.contains(viewPort.getNorthEast()) &&\n                this.downloadedBounds.contains(viewPort.getSouthWest())) {\n                // Maps of the viewport have already been downloaded.\n                return;\n            }\n        }\n\n        const distanceEastWest = distance(viewPort.getNorthEast(), viewPort.getNorthWest());\n        const distanceNorthSouth = distance(viewPort.getNorthEast(), viewPort.getSouthEast());\n        // It is not necessary to compute others as we are at zoom >= 17, the approximation is enough.\n        const maxDistanceOnScreen = Math.max(distanceEastWest, distanceNorthSouth);\n        const bestSizeOfAreaToDownload = Math.max(AREA_TO_DOWNLOAD, maxDistanceOnScreen * 2);\n\n        const center = this.map.getCenter();\n        const dist = bestSizeOfAreaToDownload * Math.sqrt(2);\n        const northEast = destinationPoint(center, dist, Math.PI / 4);\n        const southWest = destinationPoint(center, dist, - 3 * Math.PI / 4);\n        const boundsToDownload = new LngLatBounds(southWest, northEast);\n\n        // TODO: I put this here because fetch is async and takes more time than the next call to loadMapsIfNecessary.\n        this.downloadedBounds = boundsToDownload;\n\n        await this.loadMapsPromise;\n        this.loadMapsPromise = this.loadMapsInBounds(boundsToDownload);\n    }\n\n    private loadMapsInBounds = async (bounds: LngLatBounds) => {\n        const url = this.serverUrl + `/maps-in-bounds/${bounds.getWest()},${bounds.getSouth()},${bounds.getEast()},${bounds.getNorth()}`;\n        const maps = await (await fetch(url)).json();\n\n        const mapsToRemove = this.remoteMapsDownloaded.reduce((acc, map) => {\n            if (!maps.find(_map => _map.path === map.path)) {\n                acc.push(map);\n            }\n            return acc;\n        }, []);\n\n        const mapsToAdd = maps.reduce((acc, map) => {\n            if (!this.remoteMapsDownloaded.find(_map => _map.path === map.path)) {\n                acc.push(map);\n            }\n            return acc;\n        }, []);\n\n        mapsToAdd.forEach(this.addCustomMap);\n        mapsToRemove.forEach(this.removeCustomMap);\n    };\n\n    private addCustomMap = async (map: RemoteMap) => {\n        const geojson = await (await fetch(this.serverUrl + map.path)).json();\n        map.indoorMap = IndoorMap.fromGeojson(geojson, this.indoorMapOptions);\n        this.map.indoor.addMap(map.indoorMap);\n        this.remoteMapsDownloaded.push(map);\n    };\n\n    private removeCustomMap = async (map: RemoteMap) => {\n        this.map.indoor.removeMap(map.indoorMap);\n        this.remoteMapsDownloaded.splice(this.remoteMapsDownloaded.indexOf(map), 1);\n    }\n\n\n    static manage(server: string, map: Map, indoorMapOptions?: IndoorMapOptions) {\n        return new MapServerHandler(server, map, indoorMapOptions);\n    }\n\n}\n\nexport default MapServerHandler;\n","import mapboxgl from 'mapbox-gl';\n\nimport Indoor from './Indoor';\nimport IndoorMap from './IndoorMap';\nimport MapServerHandler from './MapServerHandler';\nimport DefaultStyle from './style';\n\nObject.defineProperty(\n    mapboxgl.Map.prototype,\n    'indoor',\n    {\n        get: function () {\n            if (!this._indoor) {\n                this._indoor = new Indoor(this);\n            }\n            return this._indoor;\n        }\n    });\n\n\nexport { IndoorMap, MapServerHandler, DefaultStyle };\n"],"names":["LngLat","meta_1","LngLatBounds","mapboxgl"],"mappings":"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"}